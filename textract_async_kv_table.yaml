AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::LanguageExtensions'
Description: Asynchronous Text, KV, Table, Signature detection, Queries from multi-page pdf via Textract by Srce Cde

Parameters:
    CodeBucketName:
        Description: Enter S3 bucket name where the code is uploaded
        Type: String

    S3KeyJobLambda:
        Description: Enter S3 key reference for job creation lambda
        Type: String

    S3KeyParserLambda:
        Description: Enter S3 key reference for response parser lambda
        Type: String
    
    Features: 
        Description: "Textract Features to extract - Comma seperated values"
        Type: CommaDelimitedList
        Default: "TABLES, FORMS, SIGNATURES, QUERIES"
        AllowedValues:
            - TABLES
            - FORMS
            - SIGNATURES
            - QUERIES

Resources:
    S3Bucket:
        Type: AWS::S3::Bucket
        DependsOn: 
            - JobLambda
        Properties:
            BucketName: !Join [ '-', [ !Ref AWS::StackName, !Ref AWS::Region, !Ref AWS::AccountId ] ]
            NotificationConfiguration:
                LambdaConfigurations:
                    - Event: s3:ObjectCreated:*
                      Function: !GetAtt JobLambda.Arn
                      Filter:
                          S3Key:
                              Rules:
                                  - Name: prefix
                                    Value: async-input/
                                  - Name: suffix
                                    Value: .pdf

    JobLambda:
        Type: AWS::Lambda::Function
        Properties:
            Handler: lambda_function.lambda_handler
            Runtime: python3.9
            Timeout: 10
            Role: !GetAtt LambdaIAMRole.Arn
            Environment:
                Variables:
                    FEATURES: 
                        Fn::ToJsonString: !Ref Features
                    OUTPUT_BUCKET_NAME: !Join [ '-', [ !Ref AWS::StackName, !Ref AWS::Region, !Ref AWS::AccountId ] ]
                    OUTPUT_S3_PREFIX: 'textract-output'
                    SNS_TOPIC_ARN: !Ref SNSTopic
                    SNS_ROLE_ARN: !GetAtt SNSIAMRole.Arn
            Code:
                S3Bucket: !Ref CodeBucketName
                S3Key: !Ref S3KeyJobLambda

    S3InvokeLambdaPermission:
        Type: AWS::Lambda::Permission
        DependsOn: 
            - JobLambda
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref JobLambda
            Principal: s3.amazonaws.com
            SourceArn: !Sub
                - 'arn:aws:s3:::${S3Bucket}'
                - { S3Bucket: !Join [ '-', [ !Ref AWS::StackName, !Ref AWS::Region, !Ref AWS::AccountId ] ] }

    LambdaIAMRole:
        Type: AWS::IAM::Role
        Properties:
            ManagedPolicyArns: 
                - arn:aws:iam::aws:policy/AWSLambdaExecute
                - arn:aws:iam::aws:policy/AmazonTextractFullAccess

            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - lambda.amazonaws.com
                  Action:
                  - sts:AssumeRole

    ParseLambda:
        Type: AWS::Lambda::Function
        Properties:
            Handler: lambda_function.lambda_handler
            Runtime: python3.9
            Timeout: 30
            Role: !GetAtt LambdaIAMRole.Arn
            Layers:
                - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:3
            Environment:
                Variables:
                    BUCKET_NAME: !Join [ '-', [ !Ref AWS::StackName, !Ref AWS::Region, !Ref AWS::AccountId ] ]
            Code:
                S3Bucket: !Ref CodeBucketName
                S3Key: !Ref S3KeyParserLambda

    SNSTopic:
        Type: AWS::SNS::Topic
        DependsOn: 
            - ParseLambda
        Properties:
            Subscription:
                - Protocol: lambda
                  Endpoint: !GetAtt ParseLambda.Arn

    SNSInvokeLambdaPermission:
        Type: AWS::Lambda::Permission
        DependsOn: 
            - ParseLambda
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt ParseLambda.Arn
            Principal: sns.amazonaws.com

    SNSIAMRole:
        Type: AWS::IAM::Role
        Properties:
            ManagedPolicyArns: 
                - arn:aws:iam::aws:policy/service-role/AmazonTextractServiceRole
                - arn:aws:iam::aws:policy/AmazonSNSFullAccess

            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - textract.amazonaws.com
                  Action:
                  - sts:AssumeRole
